// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/auth/basic_auth/v1/basic_auth_service.proto

package basic_authv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BasicAuthService_SignUp_FullMethodName = "/auth.basic_auth.v1.BasicAuthService/SignUp"
)

// BasicAuthServiceClient is the client API for BasicAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasicAuthServiceClient interface {
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
}

type basicAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicAuthServiceClient(cc grpc.ClientConnInterface) BasicAuthServiceClient {
	return &basicAuthServiceClient{cc}
}

func (c *basicAuthServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, BasicAuthService_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicAuthServiceServer is the server API for BasicAuthService service.
// All implementations should embed UnimplementedBasicAuthServiceServer
// for forward compatibility
type BasicAuthServiceServer interface {
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
}

// UnimplementedBasicAuthServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBasicAuthServiceServer struct {
}

func (UnimplementedBasicAuthServiceServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}

// UnsafeBasicAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicAuthServiceServer will
// result in compilation errors.
type UnsafeBasicAuthServiceServer interface {
	mustEmbedUnimplementedBasicAuthServiceServer()
}

func RegisterBasicAuthServiceServer(s grpc.ServiceRegistrar, srv BasicAuthServiceServer) {
	s.RegisterService(&BasicAuthService_ServiceDesc, srv)
}

func _BasicAuthService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicAuthServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasicAuthService_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicAuthServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BasicAuthService_ServiceDesc is the grpc.ServiceDesc for BasicAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasicAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.basic_auth.v1.BasicAuthService",
	HandlerType: (*BasicAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _BasicAuthService_SignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth/basic_auth/v1/basic_auth_service.proto",
}
